'use client';

import { useState, useEffect } from 'react';
import { useAccount, useReadContract, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Coins, 
  Calendar,
  Gift,
  TrendingUp,
  Clock,
  Star,
  Zap,
  CheckCircle,
  Trophy,
  Target,
  BarChart3,
  Flame
} from 'lucide-react';
import { CONTRACTS, SHT_TOKEN_ABI, formatTokenAmount } from '@/config/web3';
import { UserStats } from '@/types/user';
import { formatTime, formatNumber } from '@/lib/utils';
import { cn } from '@/lib/utils';

export default function TokensPage() {
  const { address, isConnected } = useAccount();
  const [userStats, setUserStats] = useState<UserStats | null>(null);
  const [canClaim, setCanClaim] = useState(false);
  const [estimatedReward, setEstimatedReward] = useState(0);

  // 读取用户余额
  const { data: balance } = useReadContract({
    address: CONTRACTS.SHT_TOKEN,
    abi: SHT_TOKEN_ABI,
    functionName: 'balanceOf',
    args: address ? [address] : undefined,
    query: { enabled: !!address },
  });

  // 读取用户统计
  const { data: stats } = useReadContract({
    address: CONTRACTS.SHT_TOKEN,
    abi: SHT_TOKEN_ABI,
    functionName: 'getUserStats',
    args: address ? [address] : undefined,
    query: { enabled: !!address },
  });

  // 检查是否可以签到
  const { data: canClaimToday } = useReadContract({
    address: CONTRACTS.SHT_TOKEN,
    abi: SHT_TOKEN_ABI,
    functionName: 'canClaimToday',
    args: address ? [address] : undefined,
    query: { enabled: !!address },
  });

  // 计算预期奖励
  const { data: dailyReward } = useReadContract({
    address: CONTRACTS.SHT_TOKEN,
    abi: SHT_TOKEN_ABI,
    functionName: 'calculateDailyReward',
    args: address ? [address] : undefined,
    query: { enabled: !!address },
  });

  // 签到
  const { writeContract, data: hash, isPending } = useWriteContract();
  const { isLoading: isConfirming, isSuccess } = useWaitForTransactionReceipt({ hash });

  useEffect(() => {
    if (stats) {
      setUserStats({
        lastClaimTime: Number(stats.lastClaimTime),
        consecutiveDays: Number(stats.consecutiveDays),
        totalClaimed: stats.totalClaimed,
        mintCount: Number(stats.mintCount),
        totalClaimedInEth: Number(formatTokenAmount(stats.totalClaimed)),
        canClaimToday: Boolean(canClaimToday),
      });
    }

    setCanClaim(Boolean(canClaimToday));
    setEstimatedReward(dailyReward ? Number(formatTokenAmount(dailyReward)) : 0);
  }, [stats, canClaimToday, dailyReward]);

  const handleClaim = () => {
    if (!address || !canClaim) return;
    
    writeContract({
      address: CONTRACTS.SHT_TOKEN,
      abi: SHT_TOKEN_ABI,
      functionName: 'claimDailyReward',
    });
  };

  // 计算连续签到进度
  const getStreakProgress = (days: number) => {
    const milestones = [7, 30, 100, 365];
    const currentMilestone = milestones.find(m => days < m) || 365;
    const progress = (days / currentMilestone) * 100;
    return { progress: Math.min(progress, 100), milestone: currentMilestone };
  };

  const streakInfo = userStats ? getStreakProgress(userStats.consecutiveDays) : { progress: 0, milestone: 7 };

  if (!isConnected) {
    return (
      <div className="container mx-auto px-4 py-8">
        <Card className="max-w-2xl mx-auto bg-white/5 border-white/10 backdrop-blur-sm">
          <CardContent className="p-12 text-center">
            <Coins className="h-16 w-16 mx-auto mb-4 text-yellow-400" />
            <h2 className="text-2xl font-bold mb-2 text-white">SHT 代币中心</h2>
            <p className="text-white/60 mb-6">
              连接钱包开始每日签到，获取SHT代币奖励
            </p>
            <div className="text-sm text-white/50">
              每日签到可获得SHT代币，连续签到奖励更丰厚
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 space-y-8">
      {/* 页面标题 */}
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold text-white flex items-center justify-center gap-2">
          <Coins className="h-8 w-8 text-yellow-400" />
          SHT 代币中心
        </h1>
        <p className="text-white/70">每日签到获取代币，连续签到奖励更丰厚</p>
      </div>

      {/* 用户概览 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
          <CardContent className="p-6 text-center">
            <div className="space-y-2">
              <Coins className="h-8 w-8 text-yellow-400 mx-auto" />
              <div className="text-3xl font-bold text-white">
                {balance ? formatTokenAmount(balance) : '0'}
              </div>
              <div className="text-sm text-white/60">SHT 余额</div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
          <CardContent className="p-6 text-center">
            <div className="space-y-2">
              <Flame className="h-8 w-8 text-orange-400 mx-auto" />
              <div className="text-3xl font-bold text-white">
                {userStats?.consecutiveDays || 0}
              </div>
              <div className="text-sm text-white/60">连续签到</div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
          <CardContent className="p-6 text-center">
            <div className="space-y-2">
              <Gift className="h-8 w-8 text-green-400 mx-auto" />
              <div className="text-3xl font-bold text-white">
                {userStats?.totalClaimedInEth?.toFixed(0) || '0'}
              </div>
              <div className="text-sm text-white/60">总计领取</div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
          <CardContent className="p-6 text-center">
            <div className="space-y-2">
              <Target className="h-8 w-8 text-purple-400 mx-auto" />
              <div className="text-3xl font-bold text-white">
                {userStats?.mintCount || 0}
              </div>
              <div className="text-sm text-white/60">铸造次数</div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* 每日签到 */}
      <Card className="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border-yellow-500/30">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Calendar className="h-5 w-5" />
            每日签到
          </CardTitle>
          <CardDescription className="text-white/70">
            每日签到获取SHT代币，连续签到获得额外奖励
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="text-center space-y-4">
            {canClaim ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <div className="text-2xl font-bold text-white">
                    今日可获得 {estimatedReward.toFixed(0)} SHT
                  </div>
                  <div className="text-white/70">
                    {userStats?.consecutiveDays ? `连续签到 ${userStats.consecutiveDays} 天` : '开始连续签到'}
                  </div>
                </div>
                
                <Button
                  onClick={handleClaim}
                  disabled={isPending || isConfirming}
                  loading={isPending || isConfirming}
                  size="lg"
                  variant="gradient"
                  className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600"
                >
                  {isPending || isConfirming ? (
                    '签到中...'
                  ) : (
                    <>
                      <Gift className="mr-2 h-5 w-5" />
                      立即签到
                    </>
                  )}
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="space-y-2">
                  <CheckCircle className="h-12 w-12 text-green-400 mx-auto" />
                  <div className="text-xl font-bold text-white">
                    今日已签到
                  </div>
                  <div className="text-white/70">
                    明日再来领取更多奖励
                  </div>
                </div>
                
                <div className="text-sm text-white/60">
                  {userStats?.lastClaimTime && (
                    <div>上次签到：{formatTime.datetime(userStats.lastClaimTime * 1000)}</div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* 签到进度 */}
          <div className="space-y-3">
            <div className="flex items-center justify-between text-sm">
              <span className="text-white/70">连续签到进度</span>
              <span className="text-white">
                {userStats?.consecutiveDays || 0} / {streakInfo.milestone} 天
              </span>
            </div>
            <Progress value={streakInfo.progress} className="h-2" />
            <div className="text-xs text-white/60 text-center">
              达到 {streakInfo.milestone} 天连续签到获得特殊奖励
            </div>
          </div>
        </CardContent>
      </Card>

      {/* 奖励规则 */}
      <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Star className="h-5 w-5" />
            奖励规则
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="space-y-2">
              <h4 className="font-medium text-white">基础奖励</h4>
              <div className="text-sm text-white/70">
                每日签到：10 SHT
              </div>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium text-white">连续奖励</h4>
              <div className="text-sm text-white/70 space-y-1">
                <div>7天：+5 SHT</div>
                <div>30天：+10 SHT</div>
                <div>100天：+20 SHT</div>
              </div>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium text-white">创作奖励</h4>
              <div className="text-sm text-white/70">
                铸造神兽：50 SHT
              </div>
            </div>
          </div>

          <div className="border-t border-white/10 pt-4">
            <h4 className="font-medium text-white mb-2">特殊活动</h4>
            <div className="text-sm text-white/70">
              • 节假日双倍奖励
              • 限时创作挑战
              • 社区活动奖励
            </div>
          </div>
        </CardContent>
      </Card>

      {/* 成就系统 */}
      <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Trophy className="h-5 w-5" />
            成就徽章
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {[
              { name: '初来乍到', desc: '首次签到', icon: '🎯', earned: userStats?.consecutiveDays ? userStats.consecutiveDays >= 1 : false },
              { name: '坚持不懈', desc: '连续签到7天', icon: '🔥', earned: userStats?.consecutiveDays ? userStats.consecutiveDays >= 7 : false },
              { name: '月度达人', desc: '连续签到30天', icon: '🌟', earned: userStats?.consecutiveDays ? userStats.consecutiveDays >= 30 : false },
              { name: '百日坚持', desc: '连续签到100天', icon: '💎', earned: userStats?.consecutiveDays ? userStats.consecutiveDays >= 100 : false },
            ].map((achievement, index) => (
              <div
                key={index}
                className={cn(
                  "p-4 rounded-lg border text-center transition-all",
                  achievement.earned
                    ? "bg-gradient-to-br from-yellow-500/20 to-orange-500/20 border-yellow-500/30"
                    : "bg-white/5 border-white/10"
                )}
              >
                <div className="text-3xl mb-2">{achievement.icon}</div>
                <div className={cn(
                  "font-medium mb-1",
                  achievement.earned ? "text-yellow-400" : "text-white/70"
                )}>
                  {achievement.name}
                </div>
                <div className="text-xs text-white/60">
                  {achievement.desc}
                </div>
                {achievement.earned && (
                  <Badge className="mt-2 bg-yellow-500/20 text-yellow-400 border-yellow-500/30">
                    已获得
                  </Badge>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}