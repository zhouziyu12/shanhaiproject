'use client';

import { useState } from 'react';
import { useAccount, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';
import { parseEther } from 'viem';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Loader2, 
  Sparkles, 
  Image as ImageIcon, 
  Upload, 
  Wand2, 
  Brain,
  CheckCircle,
  AlertCircle,
  Eye,
  Copy,
  RefreshCw,
  Download,
  Share2
} from 'lucide-react';
import { CONTRACTS, PROMPT_NFT_ABI, getStyleInfo } from '@/config/web3';
import { AIWorkflowState, ArtStyle } from '@/types/api';
import { PromptInput } from './PromptInput';
import { StyleSelector } from './StyleSelector';
import { AIPreview } from './AIPreview';
import { MintButton } from './MintButton';
import { cn, copyToClipboard } from '@/lib/utils';

export function MintNFT() {
  const { address, isConnected } = useAccount();
  const [userInput, setUserInput] = useState('');
  const [style, setStyle] = useState<ArtStyle>('classic');
  const [workflow, setWorkflow] = useState<AIWorkflowState>({
    step: 'idle',
    progress: 0,
    message: '准备开始AI创作...'
  });
  const [showOptimizedPrompt, setShowOptimizedPrompt] = useState(false);

  const { writeContract, data: hash, error: contractError, isPending } = useWriteContract();
  
  const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({
    hash,
  });

  // 开始AI工作流程
  const startAIWorkflow = async () => {
    if (!userInput.trim()) {
      setWorkflow(prev => ({ ...prev, error: '请输入神兽描述' }));
      return;
    }

    try {
      // 重置状态
      setWorkflow({
        step: 'optimizing',
        progress: 10,
        message: '🧠 DeepSeek正在优化你的创意...',
        userInput,
        startTime: Date.now()
      });

      // 调用生成API
      const response = await fetch('/api/generate-image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userInput,
          style,
          rarity: 'random'
        }),
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || '图片生成失败');
      }

      // 更新为生成完成状态
      setWorkflow({
        step: 'complete',
        progress: 100,
        message: '✨ AI创作完成，准备铸造神兽NFT！',
        userInput,
        optimizedPrompt: data.optimizedPrompt,
        imageUrl: data.imageUrl,
        endTime: Date.now()
      });

    } catch (error) {
      console.error('AI工作流错误:', error);
      setWorkflow(prev => ({
        ...prev,
        step: 'idle',
        progress: 0,
        message: '准备开始AI创作...',
        error: error instanceof Error ? error.message : '未知错误'
      }));
    }
  };

  // 铸造NFT
  const mintNFT = async () => {
    if (!address || !workflow.imageUrl || !workflow.optimizedPrompt) {
      setWorkflow(prev => ({ ...prev, error: '请先完成AI创作或连接钱包' }));
      return;
    }

    try {
      setWorkflow(prev => ({
        ...prev,
        step: 'uploading',
        progress: 85,
        message: '📤 正在上传到IPFS...'
      }));

      // 上传到IPFS
      const uploadResponse = await fetch('/api/upload-ipfs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          imageUrl: workflow.imageUrl,
          originalInput: workflow.userInput,
          optimizedPrompt: workflow.optimizedPrompt,
          style,
          creator: address,
        }),
      });

      const uploadData = await uploadResponse.json();
      
      if (!uploadResponse.ok) {
        throw new Error(uploadData.error || 'IPFS上传失败');
      }

      setWorkflow(prev => ({
        ...prev,
        step: 'minting',
        progress: 90,
        message: '⛏️ 正在铸造NFT...',
        ipfsData: uploadData.ipfs,
        metadata: uploadData.metadata
      }));

      // 铸造NFT
      const tokenURI = uploadData.mintInfo?.tokenURI || workflow.optimizedPrompt;
      
      writeContract({
        address: CONTRACTS.PROMPT_NFT,
        abi: PROMPT_NFT_ABI,
        functionName: 'mint',
        args: [address, tokenURI],
        value: parseEther('0'),
      });

    } catch (error) {
      console.error('铸造错误:', error);
      setWorkflow(prev => ({
        ...prev,
        error: error instanceof Error ? error.message : '铸造失败'
      }));
    }
  };

  // 重置工作流
  const resetWorkflow = () => {
    setUserInput('');
    setWorkflow({
      step: 'idle',
      progress: 0,
      message: '准备开始AI创作...'
    });
    setShowOptimizedPrompt(false);
  };

  // 重新生成
  const regenerateImage = () => {
    setWorkflow(prev => ({
      step: 'idle',
      progress: 0,
      message: '准备重新生成...',
      userInput: prev.userInput
    }));
  };

  // 成功页面
  if (isConfirmed) {
    return (
      <div className="w-full max-w-2xl mx-auto">
        <Card className="bg-gradient-to-br from-green-500/10 to-emerald-500/10 border-green-500/20">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <div className="relative">
                <CheckCircle className="h-16 w-16 text-green-500" />
                <div className="absolute -inset-2 rounded-full bg-green-500/20 animate-ping" />
              </div>
            </div>
            <CardTitle className="text-2xl font-bold text-green-400">
              🎉 神兽诞生成功！
            </CardTitle>
            <CardDescription className="text-green-300">
              你的山海神兽已经在区块链上永生，快去图鉴欣赏吧！
            </CardDescription>
          </CardHeader>
          <CardContent className="text-center space-y-4">
            {workflow.imageUrl && (
              <div className="relative max-w-sm mx-auto">
                <img
                  src={workflow.imageUrl}
                  alt="Your Beast"
                  className="w-full rounded-lg shadow-lg"
                />
                <Badge className="absolute top-2 right-2 bg-green-500">
                  ✨ 你的神兽
                </Badge>
              </div>
            )}
            
            <div className="flex flex-wrap gap-2 justify-center">
              <Button onClick={resetWorkflow} variant="outline">
                <Sparkles className="mr-2 h-4 w-4" />
                创造下一只神兽
              </Button>
              <Button asChild variant="secondary">
                <a href="/gallery">
                  <Eye className="mr-2 h-4 w-4" />
                  查看图鉴
                </a>
              </Button>
              <Button asChild variant="secondary">
                <a href="/marketplace">
                  <Share2 className="mr-2 h-4 w-4" />
                  去市场看看
                </a>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto space-y-8">
      {/* 页面标题 */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center space-x-2">
          <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500">
            <Sparkles className="h-6 w-6 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-white">AI神兽创造工坊</h1>
        </div>
        <p className="text-lg text-white/70 max-w-2xl mx-auto">
          DeepSeek + 智谱AI 双重技术加持，让你的创意变成独特的山海神兽NFT
        </p>
      </div>

      {/* 主要内容区域 */}
      <div className="grid lg:grid-cols-2 gap-8">
        {/* 左侧：输入和控制区 */}
        <div className="space-y-6">
          <Card className="bg-white/5 border-white/10 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <Brain className="h-5 w-5" />
                创意输入
              </CardTitle>
              <CardDescription className="text-white/70">
                描述你心中的神兽，AI将为你带来惊喜
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <PromptInput
                value={userInput}
                onChange={setUserInput}
                placeholder="描述你心中的神兽，比如：威武的火焰神龙，或者神秘的水晶凤凰..."
                disabled={workflow.step !== 'idle'}
              />
              
              <StyleSelector
                selected={style}
                onSelect={setStyle}
                disabled={workflow.step !== 'idle'}
              />
            </CardContent>
          </Card>

          {/* AI工作流程状态 */}
          {workflow.step !== 'idle' && (
            <Card className="bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-purple-500/20">
              <CardContent className="p-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-white">AI创作进度</span>
                    <span className="text-sm text-white/60">{workflow.progress}%</span>
                  </div>
                  
                  <Progress 
                    value={workflow.progress} 
                    variant="gradient"
                    className="h-2" 
                  />
                  
                  <div className="flex items-center gap-2">
                    {workflow.step === 'optimizing' && <Brain className="h-4 w-4 animate-pulse text-purple-400" />}
                    {workflow.step === 'generating' && <Wand2 className="h-4 w-4 animate-pulse text-pink-400" />}
                    {workflow.step === 'uploading' && <Upload className="h-4 w-4 animate-pulse text-blue-400" />}
                    {workflow.step === 'minting' && <Loader2 className="h-4 w-4 animate-spin text-green-400" />}
                    {workflow.step === 'complete' && <CheckCircle className="h-4 w-4 text-green-400" />}
                    <span className="text-sm text-white">{workflow.message}</span>
                  </div>
                  
                  {workflow.error && (
                    <div className="flex items-center gap-2 text-red-400 bg-red-500/10 p-3 rounded-lg">
                      <AlertCircle className="h-4 w-4" />
                      <span className="text-sm">{workflow.error}</span>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* 优化后的prompt展示 */}
          {workflow.optimizedPrompt && (
            <Card className="bg-white/5 border-white/10">
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="text-sm font-medium text-white flex items-center gap-2">
                    <Brain className="h-4 w-4 text-purple-400" />
                    DeepSeek优化后的描述
                  </h4>
                  <div className="flex gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setShowOptimizedPrompt(!showOptimizedPrompt)}
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(workflow.optimizedPrompt!)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                {showOptimizedPrompt && (
                  <p className="text-sm text-white/80 leading-relaxed">
                    {workflow.optimizedPrompt}
                  </p>
                )}
              </CardContent>
            </Card>
          )}

          {/* 控制按钮 */}
          <div className="space-y-3">
            {workflow.step === 'idle' && (
              <Button
                onClick={startAIWorkflow}
                disabled={!userInput.trim()}
                className="w-full"
                size="lg"
                variant="gradient"
              >
                <Brain className="mr-2 h-5 w-5" />
                开始AI创作
              </Button>
            )}

            {workflow.step === 'complete' && (
              <div className="space-y-2">
                {!isConnected ? (
                  <div className="text-center text-white/60 py-4">
                    请先连接钱包继续铸造
                  </div>
                ) : (
                  <MintButton
                    onClick={mintNFT}
                    disabled={isPending || isConfirming}
                    loading={isPending || isConfirming}
                    loadingText={isPending ? '准备铸造...' : '铸造中...'}
                  />
                )}
                
                <Button
                  onClick={regenerateImage}
                  variant="outline"
                  className="w-full"
                >
                  <RefreshCw className="mr-2 h-4 w-4" />
                  重新生成图片
                </Button>
              </div>
            )}
          </div>
        </div>

        {/* 右侧：预览区域 */}
        <div className="space-y-6">
          <AIPreview
            imageUrl={workflow.imageUrl}
            isLoading={workflow.step === 'optimizing' || workflow.step === 'generating'}
            style={style}
            onDownload={workflow.imageUrl ? () => {
              const link = document.createElement('a');
              link.href = workflow.imageUrl!;
              link.download = 'shanhai-beast.png';
              link.click();
            } : undefined}
          />

          {/* 功能说明 */}
          <Card className="bg-white/5 border-white/10">
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold text-white mb-4">✨ 创作特色</h3>
              <div className="space-y-3 text-sm text-white/70">
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 rounded-full bg-purple-500/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <Brain className="h-3 w-3 text-purple-400" />
                  </div>
                  <div>
                    <div className="font-medium text-white">双AI协作</div>
                    <div>DeepSeek优化创意 + 智谱AI生成图像</div>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 rounded-full bg-pink-500/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <Sparkles className="h-3 w-3 text-pink-400" />
                  </div>
                  <div>
                    <div className="font-medium text-white">公平稀有度</div>
                    <div>智能合约随机分配，VRF确保公平性</div>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 rounded-full bg-green-500/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <Upload className="h-3 w-3 text-green-400" />
                  </div>
                  <div>
                    <div className="font-medium text-white">永久存储</div>
                    <div>图片和元数据存储在IPFS上，永不丢失</div>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 rounded-full bg-yellow-500/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <Coins className="h-3 w-3 text-yellow-400" />
                  </div>
                  <div>
                    <div className="font-medium text-white">代币奖励</div>
                    <div>每次铸造获得50 SHT代币奖励</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* 错误信息显示 */}
      {contractError && (
        <Card className="bg-red-500/10 border-red-500/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 text-red-400">
              <AlertCircle className="h-5 w-5" />
              <div>
                <div className="font-medium">铸造失败</div>
                <div className="text-sm opacity-80">{contractError.message}</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}